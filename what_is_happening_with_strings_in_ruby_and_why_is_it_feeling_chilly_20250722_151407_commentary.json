{
  "title": null,
  "description": null,
  "target_audience": null,
  "duration_minutes": null,
  "slides": [
    {
      "title": "Keeping It Ruby Why Your Product Needs A Ruby Sdk 2",
      "content": [],
      "notes": "",
      "number": 1,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-2.jpg",
      "slide_type": "image"
    },
    {
      "title": "Keeping It Ruby Why Your Product Needs A Ruby Sdk 3",
      "content": [],
      "notes": "",
      "number": 2,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-3.jpg",
      "slide_type": "mixed"
    },
    {
      "title": "Keeping It Ruby Why Your Product Needs A Ruby Sdk 4",
      "content": [],
      "notes": "",
      "number": 3,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-4.jpg",
      "slide_type": "mixed"
    }
  ],
  "estimated_duration": 8,
  "completion_status": "3/3 slides completed",
  "Welcome to RubyConf Taiwan! üáπüáº_Hello Ruby developers of Taiwan! ‰Ω†Â•ΩÔºÅ_Taiwan's tech scene: From semiconductor leadership to Ruby innovation_Why Taiwan matters in the Ruby ecosystem:_‚Ä¢ Strong open-source community_‚Ä¢ Active Ruby developers and companies_‚Ä¢ Bridge between Eastern and Western Ruby communities_Today's journey: How Ruby makes decisions (spoiler: very carefully!)": "Ruby decisions? More careful than Taiwan's chip fabs!",
  "About Your Speaker: Sampo Kuokkanen üöÄ_Head of Evil Martians Japan Office_Building bridges between Ruby communities worldwide_# My Ruby journey\n# ‚Ä¢ Rails developer based in Japan\n# ‚Ä¢ Founded Sampo Development\n# ‚Ä¢ First RubyKaigi: 2022 (wrote about it!)\n# ‚Ä¢ Co-presented at RubyWorld 2024_Fun projects:_‚Ä¢ Weather-based Twitter name updater üå§Ô∏è_‚Ä¢ Self-translating Ruby strings üåê_‚Ä¢ Belated: Redis-free job framework üíé_Why I'm here: Taiwan + Japan = Ruby powerhouse in Asia!": "Weather-based Twitter name upgrader? Unlike my dating profile!",
  "The String Performance Problem in Ruby_Ruby's mutable strings: convenient but costly_20-30% of Ruby execution time spent in garbage collection_String allocations are a major contributor to GC pressure_The solution: Immutability through frozen and chilled strings": "Mutable strings? More like garbage magnets!",
  "Introduction_": "Introductions? More like re-introductions to boredom!",
  "Evil Martians Japan_": "Evil Martians? More like extra-terrestrial efficiency!",
  "Why Chilled Strings? The Migration Challenge_The goal: Default frozen literals for performance_The problem: Breaking existing code that mutates literals_The solution: Gradual transition with warnings_Chilled strings = Frozen initially + Warning on mutation_This approach maintains compatibility while encouraging best practices": "Chilled strings? My code's got cold feet!",
  "The Evolution of Frozen Strings in Ruby_Pre-2.3: Strings always mutable, developers used ''.freeze for constants_Ruby 2.1: Optimized .freeze to deduplicate identical literals, reducing memory usage_Ruby 2.3: Introduced # frozen_string_literal: true pragma for opt-in immutability_Ruby 3.0 plan: Default frozen literals postponed due to compatibility concerns_Ruby 3.3+: Introduction of 'chilled strings' as transition mechanism": "Chilled strings? Sounds like Ruby got cold feet!",
  "Evil Martians: Product Development for the Web üëΩ_Design + Development + Growth consultancy_‚Ä¢ Open Source contributors (Stimulus, AnyCable, PostCSS)_‚Ä¢ Ruby/Rails experts since 2005_‚Ä¢ Global team: SF, NYC, Barcelona, Lisbon, Japan_Japan office established: May 2022 üáØüáµ_Our mission in Asia: Strengthen Ruby communities!": "New Japan office? Finally, a place cooler than my mom's basement!",
  "Chilled Strings: The Technical Deep Dive_Ruby 3.3 introduces the putchilledstring instruction_Chilled strings: appear frozen but can 'thaw' with warnings_Key insight: Mixed benchmark results in real applications_# Technical implementation (from Ruby Issue #20205)\n# putchilledstring creates strings with special flags\n# STR_CHILLED flag marks the string as 'thawed-on-write'\n# .frozen? initially returns true (controversial decision!)\n# First mutation: warning + string becomes mutable\n# Performance impact: minimal overhead (< 1%)_Reality: Performance gains are often marginal (5-30%)_The real goal: Gradual migration to immutability": "Chilled strings? Like my leftovers‚Äîfrozen but thaw when poked!",
  "Why Chilled Strings? The Migration Challenge_Goal: Make string literals frozen by default (Ruby 4.0)_Challenge: Backward compatibility with existing code_Solution: Gradual transition through 'chilled' strings_Chilled strings = frozen initially, warn on mutation": "Chill out, strings! Don't get so heated about mutations!",
  "The Evolution of String Immutability in Ruby_Ruby 2.1: Optimized .freeze for deduplication_Ruby 2.3: Introduced # frozen_string_literal: true pragma_Ruby 2.7+: Added deprecation warnings for mutating literals_Ruby 3.3: Implemented chilled strings (R0 transition phase)_Future (Ruby 4.0): Planned default frozen literals (R2)": "Ruby's strings chillin'... unlike my deadline stress!",
  "Ruby Archaeology: The Origins of Frozen Strings_Ruby‚Äôs design was pragmatic: mutable strings by default (like Perl) made life easier for programmers at some performance cost._Over time, developers demanded immutability for performance; Ruby added deduplication on `.freeze` in 2.1._By Ruby 2.3, the magic comment emerged to freeze literals in a file when needed ‚Äì an important milestone in Ruby‚Äôs string evolution.": "Ruby strings finally committed... after being forced to chill!",
  "Ruby Archaeology: The Origins of Frozen Strings_Before frozen literals, people often wrote `''.freeze` on constants to avoid duplicate allocations. Ruby 2.1 changed behavior so that freezing identical literals would dedupe them in memory._This saved RAM and reduced GC churn. For example, avoiding one redundant allocation per call (like an HTTP header) could cut 20‚Äì30% of GC work._The `# frozen_string_literal: true` comment (Ruby 2.3) formalized this idea: any literal in that file would be deduplicated and immutable._Ultimately, Matz aims for default immutability, but needed a smooth migration plan (hence staged deprecation and warnings).": "Frozen strings? Finally, a commitment I can keep!",
  "The State of Strings in Ruby (Part 2)_Starting with Ruby 3.3 (planned R0), strings in files without a `# frozen_string_literal` comment use the new `putchilledstring` instruction._The `putchilledstring` opcode marks the string as frozen (via STR_CHILLED and FL_FREEZE flags), so `String#frozen?` returns true at first._On the first mutating operation (e.g. `<<`), the chilled string loses its frozen status and emits a warning instead of raising a `FrozenError`.": "Strings get cold feet before mutating!",
  "Ruby‚Äôs String Class History (Deeper Dive)_Ruby 1.9 introduced mutable strings with encoding support (m17n), a major internal change, but they stayed mutable by default._In Ruby 2.x, each release improved string handling: e.g. 2.1‚Äôs freeze/dedupe, 2.3‚Äôs encoding optimizations, etc._JRuby (on the JVM) uses Java‚Äôs String under the hood; it respects Ruby‚Äôs freeze semantics at the API level even though Java strings are inherently immutable._TruffleRuby (GraalVM) currently does not freeze dynamic strings by default (unintentionally) and uses frozen literals in core ‚Äì with no known compatibility issues so far.": "Ruby strings freeze? More reliable than my Wi-Fi!",
  "What Are Chilled Strings? (Example)_Example: Without `# frozen_string_literal`, Ruby 3.3 compiles `s = \"hello\"` as a chilled string. If `s` is never mutated, it stays frozen and reused._If later code does `s << ' world'`, Ruby emits a warning (`literal string will be frozen in future`) and then allows the mutation (s becomes mutable)._For most code where literals aren‚Äôt changed, chilled strings behave exactly like frozen ones ‚Äì the literal is shared instead of duplicated.": "Chilled strings? Commitment issues!",
  "Real-World Performance Gains_Microbenchmark: 22-34% faster string operations with frozen literals_Lobsters: 5% overall performance improvement_Rails: Significant memory savings from reduced allocations_# Performance comparison benchmark\nrequire 'benchmark'\n\nBenchmark.bm do |x|\n  x.report('mutable:') { 1_000_000.times { 'Hello ' + 'World' } }\n  x.report('frozen:')  { 1_000_000.times { 'Hello '.freeze + 'World'.freeze } }\nend\n# Result: ~34% faster with frozen strings!_Enterprise apps: Reduced GC pressure and improved throughput_Key insight: Small optimizations multiplied across large codebases yield major gains": "Frozen strings: Clean heap, cheap speed!",
  "Impact on Everyday Rubyists: Performance Considerations_Freezing literals cuts object allocations: identical constants can be shared, reducing GC work._Benchmarks show gains: one example found a 22% speedup concatenating strings 1M times with frozen literals in Ruby 2.7._In Ruby 3.4-dev, a similar test was ~34% faster with frozen literals._Rails has reported significant memory savings from frozen literals; since Ruby often spends ~20-30% time in GC, these savings yield CPU speedups._Ruby 3.3 also optimized `String.dup`, so developers can now use `.dup` (for mutability) without a performance penalty.": "Frozen strings? My code's faster than my Wi-Fi!",
  "Ruby's Cautious Decision-Making: A Decade in the Making_The Ruby Way: Compatibility above all else_‚Ä¢ 10+ years of discussion for this feature_‚Ä¢ Multiple RFCs, endless bikeshedding, community input_‚Ä¢ 'Better safe than sorry' philosophy_Why so slow? Ruby values backward compatibility over speed_# The famous Ruby decision timeline\n# 2013: First discussions about frozen strings\n# 2016: Magic comment introduced\n# 2024: Chilled strings finally implemented\n# 2025+: Still debating R1/R2 phases_Source: Ruby Issue #20205 - https://bugs.ruby-lang.org/issues/20205": "Ruby's decisions move slower than frozen molasses!",
  "Impact on Everyday Rubyists_Code with `# frozen_string_literal: true` is unaffected ‚Äì literals were already frozen._Without the pragma, literal strings will warn once on mutation and then become mutable (chilled behavior)._Common idioms (`dup if frozen?`) still work: a chilled string reports `.frozen? == true`, so `dup` yields a normal copy._‚ö†Ô∏è GOTCHA: Chilled string as Hash key bug - if you use a chilled string as a hash key then mutate it, the hash gets corrupted (Ruby Issue #20205)_Workflow tip: Add `frozen_string_literal` to new files, and use `str.dup` or `+''` when you need a mutable copy (now equally fast).": "Chilled strings? Like my leftovers - eventually mutable!",
  "Real-World Impact: A Case Study_Lobsters benchmark: Ruby with frozen literals was ~5% faster than without, showing tangible GC savings._Microbenchmark: looping with string concatenation ran ~22% faster with `# frozen_string_literal: true` (Ruby 2.7)._Ruby 3.4-dev test: similar code was ~34% faster when literals were frozen._GitHub case: swapping `Symbol#to_s` to `Symbol#name` (internally) cut string allocations by ~5%, hinting at further chilled-string gains._These examples demonstrate that immutable literals can improve performance in real workloads.": "Frozen strings chill out. My performance? Not so much.",
  "The R0/R1/R2 Migration Strategy: Ruby's Master Plan_Ruby's three-phase approach to avoid breaking the world:_‚Ä¢ R0 (Ruby 3.3): Chilled strings + warnings when deprecation enabled_‚Ä¢ R1 (Future Ruby): Warnings always visible (timeline TBD)_‚Ä¢ R2 (Ruby 4.0+): Frozen by default (no firm commitment)_# The reality check from Ruby Issue #20205:\n# ‚Ä¢ Performance gains: 5-30% (not revolutionary)\n# ‚Ä¢ Compatibility concerns: SIGNIFICANT\n# ‚Ä¢ Community feedback: Mixed but cautious\n# ‚Ä¢ Matz: 'the right direction in the long run'\n# ‚Ä¢ Actual timeline: Unknown (and that's OK!)_Escape hatch: RUBYOPT='--disable=frozen_string_literal'": "Thawing frozen strings? Just add RUBYOPT!",
  "Best Practices for Using Frozen String Literals_Add `# frozen_string_literal: true` to your new Ruby files. Tools like RuboCop can auto-insert this comment._When you need a mutable string, use `str.dup` or `str + ''` immediately. In Ruby 3.3+, `.dup` is optimized to be as fast as `+`._# frozen_string_literal: true\n\nclass StringProcessor\n  HEADER = \"Processing: \"  # frozen automatically\n  \n  def process(input)\n    # ‚ùå WRONG: HEADER << input  # FrozenError!\n    # ‚úÖ RIGHT: Use .dup for mutable copy\n    result = HEADER.dup\n    result << input\n    result\n  end\n  \n  # Alternative: Use + operator (also fast in Ruby 3.3+)\n  def process_alt(input)\n    HEADER + input  # Creates new string\n  end\nend_Enable deprecation warnings in your test/dev environment (e.g. `Warning[:deprecated] = true`) to catch literal mutations._In libraries, avoid mutating constants. If necessary, explicitly `dup` or `freeze` them in initializers.": "Frozen strings? Less drama than my dating profile!",
  "Alternate Syntax: `'f'` Suffix_A proposed approach was an `f`-suffix on string literals (e.g. `\"hello\"f`) to freeze them._Criticisms: this syntax was considered \"ugly\" and incompatible with older Ruby (it required tagging each literal)._In a RubyShift 2013 presentation, audience reaction to the `f`-suffix was reported as negative._Consequently, Ruby 2.3 instead adopted the file-level `# frozen_string_literal: true` magic comment approach.": "F suffix got ghosted? Relatable.",
  "The Future of Frozen String Literals_The long-term plan is to make frozen string literals the default (likely around Ruby 4.0)._Eventually the magic comment will be unnecessary. Deprecation periods ensure a smooth transition._Gem maintainers should audit their code: add the pragma where safe, or avoid mutating literals in libraries._These changes will allow further optimizations under the hood (e.g. static string internals, CoW mechanisms).": "Frozen strings? Hope they don't melt under pressure!",
  "Ruby Core Decision Timeline_The plan to make literals frozen by default in Ruby 3.0 was abandoned due to backward-compatibility concerns._Instead, the core team agreed on a staged migration: R0 (e.g. Ruby 3.4) adds deprecation warnings, R1 (later 3.x) shows warnings unconditionally, and R2 (Ruby 4.0) eventually freezes literals by default._However, Matz has stated that Ruby 4.0 (target ~2025) will still *not* enable default frozen literals yet._This cautious, decade-long process reflects the community‚Äôs emphasis on compatibility and a smooth transition.": "Decade-long freeze? My fridge works faster!",
  "The Future of Frozen String Literals (Specs)_In Ruby 3.4+, the scheme is: R0 = warnings on mutation if no pragma, R1 = warnings always, R2 = freeze by default._Ruby 3.4 already issues warnings for mutating literals without the comment._Symbol-related changes (Symbol#to_s now chilled) and other corner cases are being addressed as part of this transition._The final switch (default freeze) will come in a future release (likely Ruby 4.0), after a full deprecation cycle.": "Frozen strings? Chill out already!",
  "Interactive Break: Q&A Session_Take a few minutes to ask any questions and clarify doubts you may have about frozen and chilled strings._ÁâπÂà•Ê≠°Ëøé‰∏≠ÊñáÂïèÈ°å! (Chinese questions especially welcome!)": "Chilled strings? Perfect for Chilled-ese questions!",
  "Ruby's Philosophy: Lessons for Taiwan's Tech Scene_What Ruby's cautious approach teaches us:_‚Ä¢ Stability enables innovation (like Taiwan's semiconductor industry)_‚Ä¢ Community consensus > individual brilliance_‚Ä¢ Long-term thinking over quick wins_Taiwan's tech wisdom parallels Ruby's:_‚Ä¢ Precision and reliability first (TSMC approach)_‚Ä¢ Careful iteration and improvement_‚Ä¢ Building sustainable ecosystems, not just features_Question: How does your team balance innovation vs. stability?": "Juggling innovation and stability? Must be why I dropped the ball!",
  "The Impact on Symbol Strings_Symbols themselves are immutable as always. But converting symbols to strings (`#to_s`) now plays better with frozen-literal strategy._Ruby 3.4 implemented that `Symbol#to_s` returns a chilled string, reducing string allocations:‚Äã._This change was driven by usage patterns (often `to_s` on symbols in hot paths) and gives performance win without changing APIs._In practice, you shouldn‚Äôt need to change code: `:foo.to_s` behaves as before, but now yields a string that will warn if mutated.": "Chilled strings? My ex needed more warnings!",
  "Migration Guide: Preparing Your Codebase_Step 1: Enable warnings in development (Warning[:deprecated] = true)_Step 2: Use RuboCop to add # frozen_string_literal: true automatically_Step 3: Fix warnings by adding .dup or +'' where mutation is needed_Step 4: Test thoroughly - especially edge cases with Hash keys_Step 5: Monitor performance and memory usage improvements": "Unlike my ice cream, these strings won't melt!",
  "Real-World Impact: Another Case Study_Enterprise apps: developers report that turning on frozen literals in Rails apps cuts memory use and slightly speeds up request throughput._The cumulative effect of many small literal optimizations can be significant under load (e.g. caching, tokenization)._Tools like RuboCop (Style/FrozenStringLiteralComment) help automate the change across a codebase._Bottom line: teams using frozen literals saw smoother operation and no major breakage, validating the change.": "Frozen literals? My code needs that chill pill!",
  "Transition Slide: We‚Äôre Halfway There!_Let‚Äôs take a quick glance back at what we‚Äôve covered so far._History of immutable strings, frozen_string_literal magic, chilled strings, and performance impacts.": "Halfway frozen? Just like my coffee!",
  "Best Practices for Testing with Frozen String Literals_Enable deprecation warnings in tests (`Warning[:deprecated] = true` or `ruby -W:deprecated`) to catch literal-mutation issues._Use RuboCop‚Äôs FrozenStringLiteralComment cop to add or check the magic comment._Test for immutability: e.g. verify that constants aren‚Äôt modified by functions, or use `assert_equal constant, constant.dup`._Consider continuous integration: treat warnings as errors during upgrade to catch any new mutations.": "Testing frozen strings? Cooler than my dating history!",
  "Real-World Impact: A Final Example_Example (web request header): Without frozen literals, code often did `env[HTTP_PATH_INFO.dup]` on each request, allocating a new string each time. With a frozen literal, that extra allocation is eliminated._Jean Boussier explains that avoiding such duplicate allocations significantly reduces GC overhead (Ruby spent ~20-30% time in GC before)._Thus freezing a literal key (or using a chilled string) removes a trivial inefficiency that adds up under high load._Tiny optimizations like this, multiplied across a large app, yield measurable performance improvements in production.": "Frozen literals: Giving GC the cold shoulder!",
  "Interactive Break 3: Exercise - Try It Out!_Take a few minutes: add `# frozen_string_literal: true` to a Ruby file or script, and see if any warnings appear or behavior changes.": "Frozen strings? My code needed some chill anyway!",
  "Conclusion (Part 2): The Future of Ruby Strings_The likely future: Ruby 4.0 will default to frozen literals, as envisioned years ago._By then, code will have adapted (we‚Äôll use `dup` or constructors for mutable needs) and will have benefitted from the optimization._Beyond freezing, Ruby may introduce further innovations (e.g. string dedup internals, CoW, new literal syntax)._Until then, frozen literals remain a great tool for performance today; thank you for chilling with me!": "Frozen strings? Cool performance!",
  "Conclusion (Part 1): Recap and Reflection_We summarized the history: Ruby 2.3‚Äôs frozen-string pragma through Ruby 3.3‚Äôs chilled-strings change._Frozen literals reduce GC and speed up code in many cases._Chilled strings provide a gentle migration (warn vs error) to default immutability._Key takeaway: use frozen literals now and explicitly handle mutability to prepare for future Ruby defaults.": "Frozen strings? At least they don't ghost you!",
  "The Impact on Code Quality and Readability_Immutable strings can make code safer (fewer unintended side effects). They reduce bugs where a string constant changes underfoot._However, some developers have noted surprises: e.g. using a frozen string constant in a destructive method (like `transform_values!`) can quietly modify the shared data unexpectedly._In general, using frozen literals pushes you to think functionally (avoid side effects). It can improve clarity by removing manual `.freeze` calls, but requires awareness of immutability._With warnings and tests in place, most teams find frozen literals improve code quality, as mutation becomes explicit (`dup` or reassignment).": "Frozen strings? Like my willpower on a diet!",
  "Final Q&A Session (Open Mic)_Any remaining questions? Let‚Äôs discuss and clarify anything from this talk.": "Open mic? More like open floodgates for obvious questions!",
  "Ë¨ùË¨ù Taiwan! Thank You! üáπüáº‚ùÑÔ∏è_Thank you RubyConf Taiwan for the warm welcome!_Key takeaways:_‚Ä¢ Ruby prioritizes stability over speed (a lesson for all of us)_‚Ä¢ Chilled strings = Ruby's careful approach to change_‚Ä¢ Taiwan's tech culture aligns with Ruby's philosophy_Sources and further reading:_‚Ä¢ Ruby Issue #20205: https://bugs.ruby-lang.org/issues/20205_‚Ä¢ Jean Boussier's chilled strings implementation_‚Ä¢ RuboCop Style/FrozenStringLiteralComment_Stay connected: Let's keep the Ruby Taiwan community strong! üíé": "Chilled strings? Must be why Taiwan's bubble tea never melts!",
  "Your Action Plan: Embracing the Ruby Way (Taiwan Style)_Today: Add # frozen_string_literal: true to new files_Tomorrow: Use RuboCop to gradually update existing code_For mutable needs: Use .dup or +'' (performance is now equal)_Test with warnings: Warning[:deprecated] = true_The Ruby philosophy: Slow and steady wins the race_# Taiwan tech wisdom applied to Ruby\n# Be patient like TSMC's manufacturing cycles\n# Test thoroughly like semiconductor QA\n# Plan for the long term like infrastructure development_Remember: Chilled strings are Ruby's way of saying 'Â∞èÂøÉÔºÅ' (be careful!)": "Chilled strings? Just add boba for Taiwan style!",
  "IRB Test: Let's Try Chilled Strings! üßä_Let's open IRB and test chilled strings right now:__```ruby_# In Ruby 3.3+ without frozen_string_literal pragma_company = \"Âè∞Á©çÈõª\"  # TSMC - this creates a chilled string_puts company.frozen?  # => true (initially frozen)__# Now let's mutate it and see the warning:_company << \" Âè∞ÁÅ£\"  # Adding \" Taiwan\"_# Warning: literal string will be frozen in future_puts company  # => \"Âè∞Á©çÈõª Âè∞ÁÅ£\"_puts company.frozen?  # => false (now mutable!)_```__üéØ **Live Demo Time!** Open your terminal and try this!": "Freezing strings in Ruby - because who needs flexibility in life?"
}