{
  "title": "What is happening with strings in Ruby and why is it feeling chilly? ü•∂",
  "description": "Explore the recent changes to frozen string literals in Ruby, their implications for everyday Rubyists, and why strings are feeling 'chilly' in the latest versions.",
  "target_audience": "RubyConf Taiwan attendants",
  "duration_minutes": 30,
  "slides": [
    {
      "title": "RubyConf Taiwan! üáπüáº",
      "content": [
        "Hello Ruby developers of Taiwan! ‰Ω†Â•ΩÔºÅ",
        "Taiwan's tech scene: From semiconductor leadership to Ruby"
      ],
      "notes": "Warm welcome to the local audience and acknowledge Taiwan's tech leadership.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why Taiwan Matters in Ruby üíé",
      "content": [
        "Why Taiwan matters in the Ruby ecosystem:",
        "‚Ä¢ Strong open-source community",
        "‚Ä¢ Active Ruby developers",
        "‚Ä¢ Bridge between Eastern and Western Ruby communities",
        "",
        "Today's journey: How Ruby makes decisions (spoiler: very carefully!)"
      ],
      "notes": "Set the stage for discussing Ruby's cautious decision-making process.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "About Your Speaker: Sampo Kuokkanen üöÄ",
      "content": [
        "Head of Evil Martians Japan Office",
        "Building bridges between Ruby communities worldwide",
        "‚Ä¢ Co-presented at RubyWorld 2024 with Andrey Novikov",
        "Why I'm here: Taiwan + Japan = Ruby powerhouse in Asia!"
      ],
      "notes": "Brief introduction. Emphasize the Japan-Taiwan connection and my role in bridging Ruby communities. Mention Evil Martians' commitment to the Asian Ruby scene.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Introduction",
      "content": [],
      "notes": "",
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-2.jpg",
      "slide_type": "image"
    },
    {
      "title": "Evil Martians: Product Development for the Web üëΩ",
      "content": [
        "Design + Development + Growth consultancy",
        "‚Ä¢ Open Source contributors (AnyCable, PostCSS)",
        "‚Ä¢ Ruby/Rails experts since 2005",
        "‚Ä¢ Global team: US, Portugal, Japan",
        "Japan office established: May 2022 üáØüáµ",
        "Our mission in Asia: Strengthen Ruby communities!"
      ],
      "notes": "Quick Evil Martians intro. Emphasize our commitment to open source and the Asian Ruby community.",
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-3.jpg",
      "slide_type": "mixed"
    },
    {
      "title": "Evil Martians Japan",
      "content": [],
      "notes": "",
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-4.jpg",
      "slide_type": "mixed"
    },
    {
      "title": "Ruby Pre-2.3: The Manual Era",
      "content": [
        "Strings always mutable by default",
        "Developers used ''.freeze for constants",
        "Memory issues: every string literal created a new object"
      ],
      "notes": "Set the stage - before optimizations, every string was a separate object in memory.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Are we getting rid of the magic comments?!",
      "content": [
      ],
      "image_path": "/Users/sampokuokkanen/i_speaker/Screenshot-frozen-by-default-2025-08-01.png",
      "comment": "Really got my hopes up! Not only performance but beauty",
      "slide_type": "mixed"
    },
    {
      "title": "Live Demo: String Freezing in Action! üáπüáº",
      "content": [
        "Let's see frozen strings with Taiwan tech companies!",
        "",
        "üéØ **Press ENTER to run the demo**",
        "",
        "We'll demonstrate:",
        "‚Ä¢ Warnings without pragma",
        "‚Ä¢ Frozen errors with pragma"
      ],
      "notes": "Comprehensive demo showing both warning behavior (without pragma) and frozen behavior (with pragma). Shows Ruby's careful transition approach.",
      "image_path": null,
      "slide_type": "demo",
      "demo_code": [
        "# WITHOUT frozen_string_literal: warnings",
        "puts \"Without pragma (warnings):\"",
        "system('ruby -w -e \"company = \\\"TSMC\\\"; company << \\\" - Taiwan\\\"; puts company\"')",
        "",
        "# WITH frozen_string_literal: errors  ",
        "puts \"\\nWith pragma (frozen error):\"",
        "system('ruby --enable=frozen-string-literal -e \"company = \\\"MediaTek\\\"; begin; company << \\\" - Fabless\\\"; rescue FrozenError => e; puts e.message; end\"')"
      ]
    },
    {
      "title": "The String Performance Problem (?) in Ruby",
      "content": [
        "Ruby's mutable strings: convenient and fun, but costly",
        "String allocations are a major contributor to GC pressure",
        "The solution: Immutability through frozen and chilled strings"
      ],
      "notes": "Start with a relatable problem statement. Ask audience: 'How many of you have dealt with memory issues in your Ruby apps?' Use this to establish why string handling matters to everyone, not just core developers.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby 2.1: The Deduplication Breakthrough",
      "content": [
        "Major optimization: .freeze now deduplicates identical literals",
        "Same frozen strings share memory locations",
        "Dramatic memory usage reduction",
        "",
        "Example:",
        "‚Ä¢ Before: Each 'hello'.freeze = new object",
        "‚Ä¢ After: All 'hello'.freeze = same object"
      ],
      "notes": "Ruby 2.1 was the first major step toward efficient string handling. This optimization made .freeze actually useful for performance.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Surprising Behavior Before Ruby 2.1",
      "content": [
        "**Before Ruby 2.1**: Each .freeze created a new object",
        "",
        "```ruby",
        "# Ruby 2.0 and earlier - SURPRISE! (for some)",
        "\"hello\".freeze.object_id == \"hello\".freeze.object_id  # => false",
        "```",
        "",
        "**After Ruby 2.1**: Deduplication makes them identical",
        "",
        "```ruby",
        "# Ruby 2.1+ - Expected behavior",
        "\"hello\".freeze == \"hello\".freeze  # => true",
        "\"hello\".freeze.object_id == \"hello\".freeze.object_id  # => true",
        "```"
      ],
      "notes": "This surprises many newer Ruby developers! Before 2.1, frozen strings with identical content were still separate objects. This made .freeze almost useless for performance.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Magic Comment Origin Story",
      "content": [
        "**October 2013**: Akira Tanaka proposes frozen_string_literal",
        "**August 2015**: Akira Matsuda revives the discussion",
        "**September 2015**: Matz approves for Ruby 2.3",
        "**Ruby 2.3 (2015)**: Magic comment implemented",
        "",
        "Matz's reluctant approval: \"I don't like pragmas but if it is required\"",
        "",
        "Source: Ruby Issue #8976 - https://bugs.ruby-lang.org/issues/8976"
      ],
      "notes": "Give proper attribution to the creators and show the multi-year discussion process. This was not a quick decision!",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Great Debate: Charles Nutter's Opposition (2013)",
      "content": [
        "**Charles Nutter (JRuby creator) opposed the pragma:**",
        "",
        "\"*It would be a very bad idea to have a directive that completely changes the meaning of code from one file to another.*\"",
        "",
        "His concern: File-to-file inconsistency",
        "Counter-argument: \"Encoding pragma already does this!\""
      ],
      "notes": "Note that this was 12 years ago! Show the contentious debate. Charles's concerns about inconsistency are exactly what many developers still worry about today. This wasn't a unanimous decision! And makes sense, since the current way of having it on a file by file basis does change the language semantics, maybe leading programmers/AI astray?",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby 2.3 and Beyond",
      "content": [
        "Ruby 2.3: Magic comment goes live as **experimental feature**",
        "Original goal: Migration path toward Ruby 3.0 default frozen literals",
        "Ruby 3.0 plan: Default frozen literals postponed due to compatibility",
        "Ruby 3.4+: Introduction of 'chilled strings' as new transition mechanism"
      ],
      "notes": "Present the timeline progression from experimental pragma to the current chilled string approach. Emphasize the experimental nature.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why Chilled Strings? The Migration Challenge",
      "content": [
        "The goal: Default frozen literals for performance",
        "The problem: Breaking existing code that mutates literals",
        "The solution: Gradual transition with warnings",
        "Chilled strings = Frozen initially + Warning on mutation",
        "This approach maintains compatibility while encouraging best practices"
      ],
      "notes": "Explain the 'why' before the 'how'. This addresses the issue of premature technical depth. Use the chilly metaphor consistently - strings are 'chilled' (frozen) but can be 'warmed up' (mutated) with a warning.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Chilled Strings: Technical Implementation",
      "content": [
        "Technical implementation (from Ruby Issue #20205):",
        "‚Ä¢ putchilledstring creates strings with special flags",
        "‚Ä¢ STR_CHILLED flag marks the string as 'thawed-on-write'",
        "‚Ä¢ .frozen? returns **false** (changed after RubyKaigi!)",
        "‚Ä¢ First mutation: warning + string becomes mutable",
        "‚Ä¢ Performance impact: minimal overhead (< 1%)"
      ],
      "notes": "Present the technical implementation details. Note that frozen? behavior was changed from the original plan.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Chilled Strings: Performance Reality",
      "content": [
        "Reality: Performance gains are often marginal",
        "The real goal: Gradual migration to immutability",
        "",
        "Not about dramatic speedups ‚Äì about preparing for the future"
      ],
      "notes": "Focus on the behavior rather than low-level implementation details. Use the example to make the concept concrete.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why frozen? Returns False: The RubyKaigi Decision",
      "content": [
        "**Original plan**: `'hello'.frozen?` ‚Üí `true` for chilled strings",
        "**Problem**: Caused confusion and potential bugs",
        "**The issue**: `str.dup if str.frozen?` pattern breaks",
        "",
        "**After RubyKaigi discussions with Matz**:",
        "‚Ä¢ Changed to return `false` to avoid false positives",
        "‚Ä¢ Better to have explicit warnings than silent corruption",
        "",
        "Source: Ruby Issue #20205, Jean Boussier's experiments"
      ],
      "notes": "Explain the decision-making process behind the frozen? behavior change. This addresses community confusion and shows Ruby's responsiveness to feedback.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Evolution of String Immutability in Ruby",
      "content": [
        "Ruby 2.1: Optimized .freeze for deduplication",
        "Ruby 2.3: Introduced # frozen_string_literal: true pragma",
        "Ruby 2.7+: Added deprecation warnings for mutating literals",
        "Ruby 3.4: Implemented chilled strings (R0 transition phase)",
        "Future (Ruby 4.1+): Planned default frozen literals (R2)"
      ],
      "notes": "Present this as a clear timeline visualization. Emphasize that this has been a decade-long journey showing Ruby's commitment to both performance and backward compatibility. This replaces the repetitive historical content across multiple slides.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby Archaeology: The Origins of Frozen Strings",
      "content": [
        "Ruby‚Äôs design was pragmatic: mutable strings by default (like Perl) made life easier for programmers at some performance cost.",
        "Over time, developers demanded immutability for performance; Ruby added deduplication on `.freeze` in 2.1.",
        "By Ruby 2.3, the magic comment emerged to freeze literals in a file when needed ‚Äì an important milestone in Ruby‚Äôs string evolution."
      ],
      "notes": "A lighthearted start ‚Äì but the technical core is that Ruby always favored mutable strings for flexibility. The move to immutability is recent and driven by memory/GC concerns.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Performance Gains",
      "content": [
        "Let's benchmark frozen vs mutable strings in real-time! üöÄ",
        "",
        "üéØ **Press ENTER to run live benchmark!**",
        "",
        "We'll test 1 million string concatenations:",
        "‚Ä¢ Mutable strings: `'Hello ' + 'World'`",
        "‚Ä¢ Frozen strings: `'Hello '.freeze + 'World'.freeze`",
        "",
        "See the actual performance difference in seconds!"
      ],
      "notes": "INTERACTIVE BENCHMARK: Press ENTER to run the performance comparison live! This will show the actual time difference between mutable and frozen strings. The results typically show 20-35% improvement with frozen strings. Make sure to point out the time difference to the audience.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "What Are Chilled Strings? (Example)",
      "content": [
        "Example: Without `# frozen_string_literal`, Ruby 3.4 compiles `s = \"hello\"` as a chilled string. If `s` is never mutated, it stays frozen and reused.",
        "If later code does `s << ' world'`, Ruby emits a warning (`literal string will be frozen in future`) and then allows the mutation (s becomes mutable).",
        "For most code where literals aren‚Äôt changed, chilled strings behave exactly like frozen ones ‚Äì the literal is shared instead of duplicated."
      ],
      "notes": "We walk through code: chilled string then thawed on mutation. This means in practice you can leave code as-is; if you do mutate a literal, you get a warning and then normal behavior.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "String Duplication Basics in Ruby",
      "content": [
        "When you need a mutable copy of a string:",
        "",
        "```ruby",
        "str = 'hello'.freeze",
        "",
        "# Method 1: Unary plus (Ruby 2.3+)",
        "copy1 = +str            # Concise, returns mutable copy",
        "",
        "# Method 2: String concatenation",
        "copy2 = str + ''        # Fast, idiomatic",
        "",
        "# Method 3: Duplication",
        "copy3 = str.dup         # Clear intent, now fast in 3.3+",
        "",
        "# Method 4: Cloning",
        "copy4 = str.clone       # Preserves frozen state",
        "",
        "# Method 5: String constructor",
        "copy5 = String.new(str) # Explicit new object",
        "```"
      ],
      "notes": "Establish the foundation - these are the main ways Ruby developers create mutable copies. Each has different use cases and performance characteristics.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Performance Benefits",
      "content": [
        "Freezing literals cuts object allocations",
        "Identical constants can be shared, reducing GC work",
        "",
        "Benchmarks show gains:",
        "‚Ä¢ Ruby 2.7: 22% speedup concatenating 1M strings",
        "‚Ä¢ Ruby 3.4-dev: 34% faster with frozen literals"
      ],
      "notes": "Performance recap: frozen literals mean fewer allocations and less GC pressure.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why .dup Was Slow Before Ruby 3.3",
      "content": [
        "**The old pattern**: `str + ''` was faster than `str.dup`",
        "**Why?** String concatenation had better optimizations",
        "",
        "Ruby 3.3 fixed this imbalance:",
        "‚Ä¢ Optimized String#dup implementation",
        "‚Ä¢ Now `str.dup` performs as well as `str + ''`",
        "‚Ä¢ Better support for explicit mutability patterns"
      ],
      "notes": "Before Ruby 3.3, some developers avoided .dup because string concatenation was more optimized. This created awkward patterns like `str + ''` for copying strings.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Performance Impact",
      "content": [
        "Rails has reported significant memory savings from frozen literals",
        "Ruby often spends ~20-30% time in GC, so memory savings = speedups",
        "",
        "**Now with Ruby 3.3's .dup optimization:**",
        "‚Ä¢ Clean, readable code: `str.dup` instead of `str + ''`",
        "‚Ä¢ No performance penalty for explicit mutability",
        "‚Ä¢ Better ergonomics for frozen string workflows"
      ],
      "notes": "Combine memory savings from frozen literals with better ergonomics from .dup optimization. This makes the transition to frozen strings much smoother.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby's Cautious Decision-Making",
      "content": [
        "The Ruby Way: Compatibility above all else",
        "‚Ä¢ 10+ years of discussion for this feature",
        "‚Ä¢ Multiple RFCs, endless bikeshedding, community input",
        "‚Ä¢ 'Better safe than sorry' philosophy"
      ],
      "notes": "Emphasize Ruby's philosophy of prioritizing compatibility.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Famous Ruby Timeline",
      "content": [
        "Why so slow? Ruby values backward compatibility over speed",
        "",
        "The famous Ruby decision timeline:",
        "‚Ä¢ **2013**: Akira Tanaka proposes frozen_string_literal (Issue #8976)",
        "‚Ä¢ **2015**: Magic comment implemented in Ruby 2.3",
        "‚Ä¢ **2024**: Chilled strings finally implemented in Ruby 3.4 (Issue #20205)",
        "‚Ä¢ **2025+**: Still debating R1/R2 phases",
        "",
        "**11+ years** and counting!"
      ],
      "notes": "Perfect example of Ruby's philosophy - this is a culture that values not breaking existing code over rapid innovation. Updated with correct dates and attribution.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Road Not Taken: \"hello\"f Suffix Syntax",
      "content": [
        "Before magic comments, Ruby considered a different approach:",
        "",
        "**The \"f\" suffix proposal (Ruby Issue #8579):**",
        "```ruby",
        "name = \"Hello World\"f      # Frozen string",
        "greeting = \"Welcome\"f      # Frozen string",
        "```",
        "",
        "vs. current approach:",
        "```ruby",
        "# frozen_string_literal: true",
        "name = \"Hello World\"       # File-level magic",
        "```"
      ],
      "notes": "Historical context: Ruby considered f-suffix but chose magic comments instead.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The f-Suffix: Technical Effectiveness",
      "content": [
        "**Regular string**: `\"hello world\"`",
        "```",
        "putstring \"hello world\"  # Creates new object each time",
        "```",
        "",
        "**F-suffix string**: `\"hello world\"f`",
        "```",
        "putobject \"hello world\"  # Reuses same frozen object",
        "```",
        "",
        "**Key difference**: putstring vs putobject bytecode",
        "‚Ä¢ putstring = new object every time (garbage)",
        "‚Ä¢ putobject = reuse same frozen object (efficient)"
      ],
      "notes": "The f-suffix proposal was technically sound - it would have generated more efficient bytecode. This shows the technical merit behind the proposal, even though it was rejected for aesthetic reasons.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why \"hello\"f Was Rejected",
      "content": [
        "Despite technical merit, community feedback was negative:",
        "‚Ä¢ **\"Ugly\" syntax** - Didn't feel Ruby-like",
        "‚Ä¢ **Too verbose** - Every string needs tagging",
        "‚Ä¢ **Breaking change** - Incompatible with older Ruby",
        "‚Ä¢ **RubyShift 2013** - Audience reaction was poor",
        "",
        "‚ú® **Ruby chose elegance**: File-level magic comments",
        "",
        "Source: https://bugs.ruby-lang.org/issues/8579"
      ],
      "notes": "Historical context: Ruby seriously considered f-suffix syntax but community reaction was negative. The magic comment approach was more Ruby-like - elegant, file-level, and doesn't require tagging every string. This shows Ruby's commitment to beautiful, readable code over pure performance.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Best Practices for Using Frozen String Literals",
      "content": [
        "**1. Add the magic comment to new files:**",
        "`# frozen_string_literal: true`",
        "",
        "**2. When you need mutable strings:**",
        "‚Ä¢ Use `str.dup` (optimized in Ruby 3.3+)",
        "‚Ä¢ Or use `str + ''` for concatenation",
        "",
        "**3. Enable warnings in development:**",
        "`Warning[:deprecated] = true`"
      ],
      "notes": "Practical advice for developers. Tools like RuboCop can auto-insert the magic comment.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "RuboCop's Strong Opinions üí™",
      "content": [
        "RuboCop really doesn't like `frozen_string_literal: false`:",
        "",
        "```ruby",
        "# This triggers a warning!",
        "# frozen_string_literal: false",
        "# ‚ö†Ô∏è Style/FrozenStringLiteralComment:",
        "#    Frozen string literal comment must be set to `true`",
        "```",
        "",
        "**RuboCop's philosophy**: Push developers toward better practices",
        "‚Ä¢ Defaults assume you want performance improvements",
        "‚Ä¢ `false` is seen as intentionally opting out",
        "‚Ä¢ Tool culture reinforces Ruby's direction"
      ],
      "notes": "Interesting cultural aspect - even the tooling has opinions about which direction Ruby should go! RuboCop acts as a gentle pressure toward frozen strings.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby's Philosophy: Lessons for Taiwan's Tech Scene",
      "content": [
        "What Ruby's cautious approach teaches us:",
        "‚Ä¢ Stability enables innovation (like Taiwan's semiconductor industry)",
        "‚Ä¢ Community consensus > individual brilliance",
        "‚Ä¢ Long-term thinking over quick wins",
        "Taiwan's tech wisdom parallels Ruby's:",
        "‚Ä¢ Precision and reliability first (TSMC approach)",
        "‚Ä¢ Careful iteration and improvement",
        "‚Ä¢ Building sustainable ecosystems, not just features",
        "Question: How does your team balance innovation vs. stability?"
      ],
      "notes": "Connect Ruby's development philosophy to Taiwan's tech culture. Both prioritize long-term stability and careful decision-making.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Best Practices for Testing with Frozen String Literals",
      "content": [
        "Enable deprecation warnings in tests (`Warning[:deprecated] = true` or `ruby -W:deprecated`) to catch literal-mutation issues.",
        "Use RuboCop‚Äôs FrozenStringLiteralComment cop to add or check the magic comment.",
        "Consider continuous integration: treat warnings as errors during upgrade to catch any new mutations."
      ],
      "notes": "In testing, we want to fail fast. For example, enable Ruby warnings so that any literal mutation shows up in CI (RSpec is working on this; Minitest already does it).",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Transition Slide: We‚Äôre Halfway There!",
      "content": [
        "Let‚Äôs take a quick glance back at what we‚Äôve covered so far.",
        "History of immutable strings, frozen_string_literal magic, chilled strings, and performance impacts."
      ],
      "notes": "Quick summary: we‚Äôve traced the story up to current chilled strings and performance. Next we‚Äôll continue with quality impacts and final examples.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Impact on Code Quality and Readability",
      "content": [
        "Immutable strings can make code safer (fewer unintended side effects). They reduce bugs where a string constant changes underfoot.",
        "However, some developers have noted surprises: e.g. using a frozen string constant in a destructive method (like `transform_values!`) can quietly modify the shared data unexpectedly.",
        "In general, using frozen literals pushes you to think functionally (avoid side effects). It can improve clarity by removing manual `.freeze` calls, but requires awareness of immutability.",
        "With warnings and tests in place, mutation becomes explicit (`dup` or reassignment)."
      ],
      "notes": "Reflection: immutability is a trade-off. It avoids a class of bugs, but can surprise developers not expecting it. The community discussion noted that behavior like in this example was new.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Impact: A Final Example",
      "content": [
        "Example (web request header): Without frozen literals, code often did `env[HTTP_PATH_INFO.dup]` on each request, allocating a new string each time. With a frozen literal, that extra allocation is eliminated.",
        "Jean Boussier explains that avoiding such duplicate allocations significantly reduces GC overhead (Ruby spent ~20-30% time in GC before).",
        "Thus freezing a literal key (or using a chilled string) removes a trivial inefficiency that adds up under high load.",
        "Tiny optimizations like this, multiplied across a large app, yield measurable performance improvements in production."
      ],
      "notes": "Concrete snippet: turning `'HTTP_PATH_INFO'` into a frozen literal means `env[...]` avoids a `.dup` every time. That one allocation per request disappears.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Conclusion (Part 2): The Future of Ruby Strings",
      "content": [
        "The likely future: Ruby 4.1+ will default to frozen literals, as envisioned years ago.",
        "By then, code will have adapted (we‚Äôll use `dup` or constructors for mutable needs) and will have benefitted from the optimization.",
        "Beyond freezing, Ruby may introduce further innovations (e.g. string dedup internals, CoW, new literal syntax).",
        "Until then, frozen literals remain a great tool for performance today; thank you for chilling with me!"
      ],
      "notes": "Final thoughts: strings in Ruby are becoming more efficient. The switch to default immutability is coming, and that brings opportunities for speedups and new features.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby's Cautious Decision-Making: A Decade in the Making",
      "content": [
        "The Ruby Way: Compatibility above all else",
        "‚Ä¢ 10+ years of discussion for this feature",
        "‚Ä¢ Multiple RFCs, endless bikeshedding, community input",
        "‚Ä¢ 'Better safe than sorry' philosophy",
        "Why so slow? Ruby values backward compatibility over speed",
        "",
        "**The famous Ruby decision timeline:**",
        "‚Ä¢ 2013: First discussions about frozen strings",
        "‚Ä¢ 2015: Magic comment introduced in Ruby 2.3",
        "‚Ä¢ 2024: Chilled strings finally implemented in Ruby 3.4",
        "‚Ä¢ 2025+: Still debating R1/R2 phases",
        "",
        "Source: Ruby Issue #20205 - https://bugs.ruby-lang.org/issues/20205"
      ],
      "notes": "Emphasize Ruby's extremely cautious approach. This is a culture that values not breaking existing code over rapid innovation. Perfect example of Ruby's philosophy.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Evil Martians to the Rescue: Freezolite\\! üßä",
      "content": [
        "**Ruby 4.0 won't have frozen literals by default? No problem\\!**",
        "",
        "üöÄ **Freezolite by Vladimir Dementyev (palkan)**",
        "Our Evil Martians master wizard/engineer created a practical solution:",
        "",
        "‚Ä¢ Auto-adds  to your files",
        "‚Ä¢ No more manual pragma additions or RuboCop autocorrect",
        "‚Ä¢ Granular control over which files get frozen literals",
        "‚Ä¢ Works seamlessly with Rails and Bootsnap",
        "",
        "",
        "",
        "üîó github.com/ruby-next/freezolite"
      ],
      "notes": "Showcase Evil Martians' contribution to solving the frozen string literal adoption problem. Freezolite provides an elegant solution while we wait for Ruby 4.0+. This demonstrates our commitment to practical Ruby tooling.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Your Action Plan: Embracing the Ruby Way (Taiwan Style)",
      "content": [
        "Today: Add # frozen_string_literal: true to new files",
        "Tomorrow: Use RuboCop to gradually update existing code",
        "For mutable needs: Use .dup or +'' (performance is now equal)",
        "Test with warnings: Warning[:deprecated] = true",
        "The Ruby philosophy: Slow and steady wins the race",
        "Remember: Chilled strings are Ruby's way of saying 'Â∞èÂøÉÔºÅ' (be careful!)"
      ],
      "notes": "Connect the technical advice to Taiwan's methodical approach to technology development. End on a cultural note that resonates with the local audience.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Further Reading: Core Ruby Issues & RFCs",
      "content": [
        "üìã **Essential Ruby Tracker Issues:**",
        "‚Ä¢ Ruby Issue #20205: Chilled strings implementation - https://bugs.ruby-lang.org/issues/20205",
        "‚Ä¢ Ruby Issue #17104: Don't freeze interpolated strings - https://bugs.ruby-lang.org/issues/17104",
        "‚Ä¢ Ruby Issue #8976: File-level frozen_string_literal pragma - https://bugs.ruby-lang.org/issues/8976",
        "‚Ä¢ Ruby Issue #11473: Frozen string literal performance - https://bugs.ruby-lang.org/issues/11473",
        "",
        "üèõÔ∏è **Official Ruby Project Resources:**",
        "‚Ä¢ Ruby Master Project: https://bugs.ruby-lang.org/projects/ruby-master",
        "‚Ä¢ Ruby Documentation: https://ruby-doc.org/core-3.4.0/",
        "‚Ä¢ Ruby Changelog: https://github.com/ruby/ruby/blob/master/NEWS.md"
      ],
      "notes": "These are the primary sources for all technical claims in this presentation. The Ruby bug tracker is the authoritative source for all feature discussions and implementations.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Further Reading: Implementation & Performance",
      "content": [
        "üë®‚Äçüíª **Key Contributors & Implementations:**",
        "‚Ä¢ Jean Boussier: Lead implementer of chilled strings",
        "‚Ä¢ Koichi Sasada: Ruby VM and performance work",
        "‚Ä¢ Jeremy Evans: String optimization contributions",
        "",
        "üìä **Performance & Benchmarking:**",
        "‚Ä¢ Ruby Performance Benchmarks: https://github.com/ruby-bench/ruby-bench-suite",
        "‚Ä¢ Memory profiling tools: https://github.com/SamSaffron/memory_profiler",
        "‚Ä¢ String allocation analysis in Rails apps",
        "",
        "üõ†Ô∏è **Tools & Linting:**",
        "‚Ä¢ RuboCop FrozenStringLiteralComment: https://docs.rubocop.org/rubocop/cops_style.html#stylefrozenstringliteralcomment",
        "‚Ä¢ Ruby static analysis tools for string usage"
      ],
      "notes": "Practical resources for implementing and measuring the impact of frozen string literals in your applications.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Further Reading: Community & Alternative Implementations",
      "content": [
        "üåê **Ruby Implementations:**",
        "‚Ä¢ TruffleRuby Issues #2303, #2304: https://github.com/oracle/truffleruby/issues/2303",
        "‚Ä¢ JRuby string handling documentation",
        "‚Ä¢ MRI (Matz's Ruby) implementation details",
        "",
        "üìù **Community Resources:**",
        "‚Ä¢ Ruby Weekly: https://rubyweekly.com/",
        "‚Ä¢ Ruby conferences and talks on string performance",
        "‚Ä¢ Blog posts by Ruby core team members",
        "",
        "üè¢ **Enterprise Adoption:**",
        "‚Ä¢ Rails guides on string optimization",
        "‚Ä¢ Shopify's Ruby performance insights",
        "‚Ä¢ GitHub's Ruby infrastructure learnings"
      ],
      "notes": "Community resources and real-world adoption stories. These show how different organizations have successfully implemented frozen string literals.",
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Connect on X! üê¶",
      "content": [
        "Follow me for more Ruby insights and updates:",
        "",
        "üê¶ **@KuokkanenSampo**",
        "",
        "‚Ä¢ Evil Martians Japan updates",
        "‚Ä¢ Occasionally Ruby tips (maybe)",
        "‚Ä¢ Pictures of my Honda Beat"
      ],
      "notes": "Show QR code for X account. Encourage attendees to connect for ongoing Ruby discussions and updates.",
      "image_path": "qr_code_x_account.png",
      "slide_type": "mixed"
    },
    {
      "title": "Get the Presentation Tool! üõ†Ô∏è",
      "content": [
        "This presentation was created with i_speaker:",
        "‚Ä¢ AI-powered Ruby gem for creating presentations",
        "‚Ä¢ Interactive console interface with dual AI support",
        "‚Ä¢ Multiple export formats (Markdown, Slidev, JSON)",
        "",
        "üîó **Source code and gem available at:**"
      ],
      "notes": "Show QR code for the i_speaker GitHub repository. This tool was used to create this presentation.",
      "image_path": "qr_code_github_i_speaker.png",
      "slide_type": "mixed"
    },
    {
      "title": "Ë¨ùË¨ù Taiwan! Thank You! üáπüáº‚ùÑÔ∏è",
      "content": [
        "Thank you RubyConf Taiwan for the warm welcome!",
        "Key takeaways:",
        "‚Ä¢ Ruby prioritizes stability over speed (a lesson for all of us)",
        "‚Ä¢ Chilled strings = Ruby's careful approach to change",
        "‚Ä¢ Taiwan's tech culture aligns with Ruby's philosophy",
        "Sources and further reading:",
        "‚Ä¢ Ruby Issue #20205: https://bugs.ruby-lang.org/issues/20205",
        "‚Ä¢ Jean Boussier's chilled strings implementation",
        "‚Ä¢ RuboCop Style/FrozenStringLiteralComment",
        "Stay connected: Let's keep the Ruby Taiwan community strong! üíé"
      ],
      "notes": "End with gratitude to the local community and provide proper sources for follow-up.",
      "image_path": null,
      "slide_type": "content"
    }
  ],
  "estimated_duration": 127,
  "completion_status": "58/58 slides completed"
}