{
  "title": "What is happening with strings in Ruby and why is it feeling chilly? ü•∂",
  "description": "Explore the recent changes to frozen string literals in Ruby, their implications for everyday Rubyists, and why strings are feeling 'chilly' in the latest versions.",
  "target_audience": "RubyConf Taiwan attendants",
  "duration_minutes": 30,
  "slides": [
    {
      "title": "Welcome to RubyConf Taiwan! üáπüáº",
      "content": [
        "Hello Ruby developers of Taiwan! ‰Ω†Â•ΩÔºÅ",
        "Taiwan's tech scene: From semiconductor leadership to Ruby innovation",
        "Why Taiwan matters in the Ruby ecosystem:",
        "‚Ä¢ Strong open-source community",
        "‚Ä¢ Active Ruby developers and companies", 
        "‚Ä¢ Bridge between Eastern and Western Ruby communities",
        "Today's journey: How Ruby makes decisions (spoiler: very carefully!)"
      ],
      "notes": "Acknowledge the local audience and Taiwan's importance in tech. Set the stage for discussing Ruby's cautious decision-making process.",
      "number": 1,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The String Performance Problem in Ruby",
      "content": [
        "Ruby's mutable strings: convenient but costly",
        "20-30% of Ruby execution time spent in garbage collection",
        "String allocations are a major contributor to GC pressure",
        "The solution: Immutability through frozen and chilled strings"
      ],
      "notes": "Start with a relatable problem statement. Ask audience: 'How many of you have dealt with memory issues in your Ruby apps?' Use this to establish why string handling matters to everyone, not just core developers.",
      "number": 1,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Introduction",
      "content": [],
      "notes": "",
      "number": 1,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-2.jpg",
      "slide_type": "image"
    },
    {
      "title": "Evil Martians",
      "content": [],
      "notes": "",
      "number": 2,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-3.jpg",
      "slide_type": "mixed"
    },
    {
      "title": "Evil Martians Japan",
      "content": [],
      "notes": "",
      "number": 3,
      "image_path": "/Users/sampokuokkanen/i_speaker/Keeping it Ruby_ Why Your Product Needs a Ruby SDK-4.jpg",
      "slide_type": "mixed"
    },
    {
      "title": "The Evolution of Frozen Strings in Ruby",
      "content": [
        "Pre-2.3: Strings always mutable, developers used ''.freeze for constants",
        "Ruby 2.1: Optimized .freeze to deduplicate identical literals, reducing memory usage",
        "Ruby 2.3: Introduced # frozen_string_literal: true pragma for opt-in immutability",
        "Ruby 3.0 plan: Default frozen literals postponed due to compatibility concerns",
        "Ruby 3.3+: Introduction of 'chilled strings' as transition mechanism"
      ],
      "notes": "Present the history as a clear timeline. Emphasize the progression from manual freezing to pragma to the current chilled string approach. This creates a coherent narrative instead of fragmented information.",
      "number": 2,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why Chilled Strings? The Migration Challenge",
      "content": [
        "The goal: Default frozen literals for performance",
        "The problem: Breaking existing code that mutates literals",
        "The solution: Gradual transition with warnings",
        "Chilled strings = Frozen initially + Warning on mutation",
        "This approach maintains compatibility while encouraging best practices"
      ],
      "notes": "Explain the 'why' before the 'how'. This addresses the issue of premature technical depth. Use the chilly metaphor consistently - strings are 'chilled' (frozen) but can be 'warmed up' (mutated) with a warning.",
      "number": 3,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Chilled Strings: The Technical Deep Dive",
      "content": [
        "Ruby 3.4+ introduces the putchilledstring instruction",
        "Chilled strings: appear frozen but can 'thaw' with warnings",
        "Key insight: Mixed benchmark results in real applications",
        "# Technical implementation (from Ruby Issue #20205)\n# putchilledstring creates strings with special flags\n# STR_CHILLED flag marks the string as 'thawed-on-write'\n# .frozen? initially returns true (but this was debated!)\n# First mutation triggers warning + removes frozen state",
        "Reality: Performance gains are often marginal",
        "The real goal: Preparing for eventual default immutability"
      ],
      "notes": "Present the technical details in a clear, sequential manner. Focus on the behavior rather than low-level implementation details. Use the example to make the concept concrete.",
      "number": 4,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Why Chilled Strings? The Migration Challenge",
      "content": [
        "Goal: Make string literals frozen by default (Ruby 4.0)",
        "Challenge: Backward compatibility with existing code",
        "Solution: Gradual transition through 'chilled' strings",
        "Chilled strings = frozen initially, warn on mutation"
      ],
      "notes": "Explain the rationale before diving into implementation. Use an analogy: 'Chilled strings are like training wheels - they let you know when you're doing something that won't work in the future, but won't crash your program immediately.'",
      "number": 5,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Evolution of String Immutability in Ruby",
      "content": [
        "Ruby 2.1: Optimized .freeze for deduplication",
        "Ruby 2.3: Introduced # frozen_string_literal: true pragma",
        "Ruby 2.7+: Added deprecation warnings for mutating literals",
        "Ruby 3.3: Implemented chilled strings (R0 transition phase)",
        "Future (Ruby 4.0): Planned default frozen literals (R2)"
      ],
      "notes": "Present this as a clear timeline visualization. Emphasize that this has been a decade-long journey showing Ruby's commitment to both performance and backward compatibility. This replaces the repetitive historical content across multiple slides.",
      "number": 6,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The State of Strings in Ruby (Part 2)",
      "content": [
        "Starting with Ruby 3.3 (planned R0), strings in files without a `# frozen_string_literal` comment use the new `putchilledstring` instruction:contentReference[oaicite:6]{index=6}.",
        "The `putchilledstring` opcode marks the string as frozen (via STR_CHILLED and FL_FREEZE flags):contentReference[oaicite:7]{index=7}, so `String#frozen?` returns true at first.",
        "On the first mutating operation (e.g. `<<`), the chilled string loses its frozen status and emits a warning instead of raising a `FrozenError`:contentReference[oaicite:8]{index=8}."
      ],
      "notes": "In Ruby 3.3 (core discussion calls this R0), the behavior is: no pragma -> string is chilled. It's frozen but thaws on mutation with a warning. Files with explicit comments (true/false) behave unchanged.",
      "number": 7,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby Archaeology: The Origins of Frozen Strings",
      "content": [
        "Ruby‚Äôs design was pragmatic: mutable strings by default (like Perl) made life easier for programmers at some performance cost:contentReference[oaicite:9]{index=9}.",
        "Over time, developers demanded immutability for performance; Ruby added deduplication on `.freeze` in 2.1:contentReference[oaicite:10]{index=10}.",
        "By Ruby 2.3, the magic comment emerged to freeze literals in a file when needed:contentReference[oaicite:11]{index=11} ‚Äì an important milestone in Ruby‚Äôs string evolution."
      ],
      "notes": "A lighthearted start ‚Äì but the technical core is that Ruby always favored mutable strings for flexibility. The move to immutability is recent and driven by memory/GC concerns.",
      "number": 8,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby Archaeology: The Origins of Frozen Strings",
      "content": [
        "Before frozen literals, people often wrote `''.freeze` on constants to avoid duplicate allocations. Ruby 2.1 changed behavior so that freezing identical literals would dedupe them in memory:contentReference[oaicite:12]{index=12}.",
        "This saved RAM and reduced GC churn. For example, avoiding one redundant allocation per call (like an HTTP header) could cut 20‚Äì30% of GC work:contentReference[oaicite:13]{index=13}.",
        "The `# frozen_string_literal: true` comment (Ruby 2.3) formalized this idea: any literal in that file would be deduplicated and immutable:contentReference[oaicite:14]{index=14}.",
        "Ultimately, Matz aims for default immutability, but needed a smooth migration plan (hence staged deprecation and warnings:contentReference[oaicite:15]{index=15})."
      ],
      "notes": "History recap: how `.freeze` became more efficient (dedupe), how that led to the magic comment, and why it‚Äôs needed (performance/GC).",
      "number": 9,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby‚Äôs String Class History (Deeper Dive)",
      "content": [
        "Ruby 1.9 introduced mutable strings with encoding support (m17n), a major internal change, but they stayed mutable by default.",
        "In Ruby 2.x, each release improved string handling: e.g. 2.1‚Äôs freeze/dedupe, 2.3‚Äôs encoding optimizations, etc.",
        "JRuby (on the JVM) uses Java‚Äôs String under the hood; it respects Ruby‚Äôs freeze semantics at the API level even though Java strings are inherently immutable.",
        "TruffleRuby (GraalVM) currently does not freeze dynamic strings by default (unintentionally) and uses frozen literals in core ‚Äì with no known compatibility issues so far:contentReference[oaicite:16]{index=16}."
      ],
      "notes": "Implementation note: MRI vs JRuby vs Truffle. We focus on MRI, but JRuby has its own approach (Java strings) and Truffle leaves dynamic strings mutable (but core code is frozen):contentReference[oaicite:17]{index=17}.",
      "number": 10,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Performance Gains",
      "content": [
        "Microbenchmark: 22-34% faster string operations with frozen literals",
        "Lobsters: 5% overall performance improvement",
        "Rails: Significant memory savings from reduced allocations",
        "# Performance comparison benchmark\nrequire 'benchmark'\n\nBenchmark.bm do |x|\n  x.report('mutable:') { 1_000_000.times { 'Hello ' + 'World' } }\n  x.report('frozen:')  { 1_000_000.times { 'Hello '.freeze + 'World'.freeze } }\nend\n# Result: ~34% faster with frozen strings!",
        "Enterprise apps: Reduced GC pressure and improved throughput",
        "Key insight: Small optimizations multiplied across large codebases yield major gains"
      ],
      "notes": "Present these benchmarks as evidence of tangible benefits. Use this to answer the audience's question: 'Why should I care about this?' Emphasize that these aren't just theoretical improvements but real-world benefits.",
      "number": 11,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "What Are Chilled Strings? (Example)",
      "content": [
        "Example: Without `# frozen_string_literal`, Ruby 3.3 compiles `s = \"hello\"` as a chilled string. If `s` is never mutated, it stays frozen and reused.",
        "If later code does `s << ' world'`, Ruby emits a warning (`literal string will be frozen in future`) and then allows the mutation (s becomes mutable).",
        "For most code where literals aren‚Äôt changed, chilled strings behave exactly like frozen ones ‚Äì the literal is shared instead of duplicated."
      ],
      "notes": "We walk through code: chilled string then thawed on mutation. This means in practice you can leave code as-is; if you do mutate a literal, you get a warning and then normal behavior.",
      "number": 12,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Impact on Everyday Rubyists: Performance Considerations",
      "content": [
        "Freezing literals cuts object allocations: identical constants can be shared, reducing GC work:contentReference[oaicite:20]{index=20}.",
        "Benchmarks show gains: one example found a 22% speedup concatenating strings 1M times with frozen literals in Ruby 2.7:contentReference[oaicite:21]{index=21}.contentReference[oaicite:22]{index=22}.",
        "In Ruby 3.4-dev, a similar test was ~34% faster with frozen literals:contentReference[oaicite:23]{index=23}.",
        "Rails has reported significant memory savings from frozen literals:contentReference[oaicite:24]{index=24}; since Ruby often spends ~20-30% time in GC, these savings yield CPU speedups:contentReference[oaicite:25]{index=25}.",
        "Ruby 3.3 also optimized `String.dup`, so developers can now use `.dup` (for mutability) without a performance penalty:contentReference[oaicite:26]{index=26}."
      ],
      "notes": "Performance recap: frozen literals mean fewer allocations and less GC. We saw actual numbers from the community:contentReference[oaicite:27]{index=27}:contentReference[oaicite:28]{index=28}, and note that Ruby 3.3 made `.dup` as fast as `+`:contentReference[oaicite:29]{index=29}.",
      "number": 13,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby's Cautious Decision-Making: A Decade in the Making",
      "content": [
        "The Ruby Way: Compatibility above all else",
        "‚Ä¢ 10+ years of discussion for this feature",
        "‚Ä¢ Multiple RFCs, endless bikeshedding, community input",
        "‚Ä¢ 'Better safe than sorry' philosophy",
        "Why so slow? Ruby values backward compatibility over speed",
        "# The famous Ruby decision timeline\n# 2013: First discussions about frozen strings\n# 2016: Magic comment introduced\n# 2024: Chilled strings finally implemented\n# 2025+: Still debating R1/R2 phases",
        "Source: Ruby Issue #20205 - https://bugs.ruby-lang.org/issues/20205"
      ],
      "notes": "Emphasize Ruby's extremely cautious approach. This is a culture that values not breaking existing code over rapid innovation. Perfect example of Ruby's philosophy.",
      "number": 14,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Impact on Everyday Rubyists",
      "content": [
        "Code with `# frozen_string_literal: true` is unaffected ‚Äì literals were already frozen:contentReference[oaicite:36]{index=36}.",
        "Without the pragma, literal strings will warn once on mutation and then become mutable (chilled behavior):contentReference[oaicite:37]{index=37}.",
        "Common idioms (`dup if frozen?`) still work: a chilled string reports `.frozen? == true`, so `dup` yields a normal copy:contentReference[oaicite:38]{index=38}.",
        "Caution: Using a chilled string as a Hash key and then mutating it can change the key unexpectedly (known MRI bug):contentReference[oaicite:39]{index=39}.",
        "Workflow tip: Add `frozen_string_literal` to new files, and use `str.dup` or `+''` when you need a mutable copy (now equally fast:contentReference[oaicite:40]{index=40})."
      ],
      "notes": "Practical: if you already use `# frozen_string_literal: true`, nothing changes. If not, you‚Äôll get a warning on first mutation. Continue to use `dup`/`+` for copies; they‚Äôre fast now:contentReference[oaicite:41]{index=41}. Watch out for the hash-key issue:contentReference[oaicite:42]{index=42}.",
      "number": 15,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Impact: A Case Study",
      "content": [
        "Lobsters benchmark: Ruby with frozen literals was ~5% faster than without:contentReference[oaicite:43]{index=43}, showing tangible GC savings.",
        "Microbenchmark: looping with string concatenation ran ~22% faster with `# frozen_string_literal: true` (Ruby 2.7):contentReference[oaicite:44]{index=44}:contentReference[oaicite:45]{index=45}.",
        "Ruby 3.4-dev test: similar code was ~34% faster when literals were frozen:contentReference[oaicite:46]{index=46}.",
        "GitHub case: swapping `Symbol#to_s` to `Symbol#name` (internally) cut string allocations by ~5%, hinting at further chilled-string gains:contentReference[oaicite:47]{index=47}.",
        "These examples demonstrate that immutable literals can improve performance in real workloads."
      ],
      "notes": "Case studies: see actual speed-ups from frozen literals:contentReference[oaicite:48]{index=48}:contentReference[oaicite:49]{index=49}, and note that even large systems like GitHub see ~5% fewer allocations by changing symbol-to-string behavior:contentReference[oaicite:50]{index=50}.",
      "number": 16,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The R0/R1/R2 Migration Strategy: Ruby's Master Plan",
      "content": [
        "Ruby's three-phase approach to avoid breaking the world:",
        "‚Ä¢ R0 (Ruby 3.4+): Chilled strings + warnings only when enabled",
        "‚Ä¢ R1 (Future 3.x): Warnings become always visible",
        "‚Ä¢ R2 (Ruby 4.0?): Actually freeze by default (maybe)",
        "# The reality check\n# Mixed benchmark results\n# Performance gains: marginal\n# Compatibility concerns: significant\n# Matz's quote: 'frozen literals is the right direction'\n# Timeline: TBD (To Be Determined... eventually)",
        "Fun fact: You can opt out with RUBYOPT='--disable=frozen_string_literal'"
      ],
      "notes": "Based on Ruby Issue #20205. Highlight that even the timeline is tentative - Ruby doesn't commit to breaking changes lightly.",
      "number": 17,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Best Practices for Using Frozen String Literals",
      "content": [
        "Add `# frozen_string_literal: true` to your new Ruby files. Tools like RuboCop can auto-insert this comment:contentReference[oaicite:55]{index=55}.",
        "When you need a mutable string, use `str.dup` or `str + ''` immediately. In Ruby 3.3+, `.dup` is optimized to be as fast as `+`:contentReference[oaicite:56]{index=56}.",
        "# frozen_string_literal: true\n\nclass StringProcessor\n  HEADER = \"Processing: \"  # frozen by default\n  \n  def process(input)\n    # Need mutable string? Use .dup\n    result = HEADER.dup\n    result << input\n    result\n  end\nend",
        "Enable deprecation warnings in your test/dev environment (e.g. `Warning[:deprecated] = true`) to catch literal mutations.",
        "In libraries, avoid mutating constants. If necessary, explicitly `dup` or `freeze` them in initializers."
      ],
      "notes": "Recommendations: use the magic comment to benefit immediately. Also update your code: prefer `dup` instead of bang methods, since dup is now fast:contentReference[oaicite:57]{index=57}. And run tests with warnings enabled to find any problems.",
      "number": 18,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Alternate Syntax: `'f'` Suffix",
      "content": [
        "A proposed approach was an `f`-suffix on string literals (e.g. `\"hello\"f`) to freeze them:contentReference[oaicite:0]{index=0}.",
        "Criticisms: this syntax was considered \"ugly\" and incompatible with older Ruby (it required tagging each literal):contentReference[oaicite:1]{index=1}.",
        "In a RubyShift 2013 presentation, audience reaction to the `f`-suffix was reported as negative:contentReference[oaicite:2]{index=2}.",
        "Consequently, Ruby 2.3 instead adopted the file-level `# frozen_string_literal: true` magic comment approach."
      ],
      "notes": "History: an `f`-suffix was once discussed (to write frozen literals as `\"text\"f`), but it was rejected in favor of the magic comment:contentReference[oaicite:3]{index=3}:contentReference[oaicite:4]{index=4}.",
      "number": 19,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby Core Decision Timeline",
      "content": [
        "The plan to make literals frozen by default in Ruby 3.0 was abandoned due to backward-compatibility concerns:contentReference[oaicite:5]{index=5}.",
        "Instead, the core team agreed on a staged migration: R0 (e.g. Ruby 3.4) adds deprecation warnings, R1 (later 3.x) shows warnings unconditionally, and R2 (Ruby 4.0) eventually freezes literals by default:contentReference[oaicite:6]{index=6}.",
        "However, Matz has stated that Ruby 4.0 (target ~2025) will still *not* enable default frozen literals yet:contentReference[oaicite:7]{index=7}.",
        "This cautious, decade-long process reflects the community‚Äôs emphasis on compatibility and a smooth transition."
      ],
      "notes": "Summary: Ruby 2.3‚Äôs default-change was delayed:contentReference[oaicite:8]{index=8}, and the R0/R1/R2 timeline was set:contentReference[oaicite:9]{index=9}. Even so, default freeze in 4.0 is postponed:contentReference[oaicite:10]{index=10}, pending broad adoption and testing.",
      "number": 20,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Future of Frozen String Literals",
      "content": [
        "The long-term plan is to make frozen string literals the default (likely around Ruby 4.0):contentReference[oaicite:58]{index=58}.",
        "Eventually the magic comment will be unnecessary. Deprecation periods ensure a smooth transition.",
        "Gem maintainers should audit their code: add the pragma where safe, or avoid mutating literals in libraries.",
        "These changes will allow further optimizations under the hood (e.g. static string internals, CoW mechanisms)."
      ],
      "notes": "Looking ahead: prepare for Ruby 4.0 default. The ecosystem needs to opt-in now to minimize friction. In return we get faster strings across the board.",
      "number": 21,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Future of Frozen String Literals (Specs)",
      "content": [
        "In Ruby 3.4+, the scheme is: R0 = warnings on mutation if no pragma, R1 = warnings always, R2 = freeze by default:contentReference[oaicite:66]{index=66}.",
        "Ruby 3.4 already issues warnings for mutating literals without the comment:contentReference[oaicite:67]{index=67}.",
        "Symbol-related changes (Symbol#to_s now chilled) and other corner cases are being addressed as part of this transition:contentReference[oaicite:68]{index=68}.",
        "The final switch (default freeze) will come in a future release (likely Ruby 4.0), after a full deprecation cycle."
      ],
      "notes": "Specifically: Ruby 3.4 uses `putchilledstring` by default and warns on mutation:‚Äã:contentReference[oaicite:11]{index=11}. Further steps (R1/R2) will follow in 3.5+ and Ruby 4.",
      "number": 22,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Impact on Symbol Strings",
      "content": [
        "Symbols themselves are immutable as always. But converting symbols to strings (`#to_s`) now plays better with frozen-literal strategy.",
        "Ruby 3.4 implemented that `Symbol#to_s` returns a chilled string, reducing string allocations:‚Äã:contentReference[oaicite:12]{index=12}.",
        "This change was driven by usage patterns (often `to_s` on symbols in hot paths) and gives performance win without changing APIs.",
        "In practice, you shouldn‚Äôt need to change code: `:foo.to_s` behaves as before, but now yields a string that will warn if mutated."
      ],
      "notes": "A quick note on symbols: to reduce allocations, Ruby will mark the string from `Symbol#to_s` as chilled:contentReference[oaicite:13]{index=13}. No direct action needed in your code yet.",
      "number": 23,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Impact: Another Case Study",
      "content": [
        "Enterprise apps: developers report that turning on frozen literals in Rails apps cuts memory use and slightly speeds up request throughput.",
        "The cumulative effect of many small literal optimizations can be significant under load (e.g. caching, tokenization).",
        "Tools like RuboCop (Style/FrozenStringLiteralComment) help automate the change across a codebase:contentReference[oaicite:72]{index=72}.",
        "Bottom line: teams using frozen literals saw smoother operation and no major breakage, validating the change."
      ],
      "notes": "Another data point: adoption in Rails and large codebases has been largely positive. Profilers show reduced GC and similar or improved latency.",
      "number": 24,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Migration Guide: Preparing Your Codebase",
      "content": [
        "Step 1: Enable warnings in development (Warning[:deprecated] = true)",
        "Step 2: Use RuboCop to add # frozen_string_literal: true automatically",
        "Step 3: Fix warnings by adding .dup or +'' where mutation is needed",
        "Step 4: Test thoroughly - especially edge cases with Hash keys",
        "Step 5: Monitor performance and memory usage improvements"
      ],
      "notes": "This addresses the critical gap identified in the analysis. Make this actionable with specific commands and tools. Emphasize that this is a gradual process that can be done incrementally. Provide a clear path forward for attendees to apply this knowledge.",
      "number": 25,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ruby's Philosophy: Lessons for Taiwan's Tech Scene",
      "content": [
        "What Ruby's cautious approach teaches us:",
        "‚Ä¢ Stability enables innovation (like Taiwan's semiconductor industry)",
        "‚Ä¢ Community consensus > individual brilliance",
        "‚Ä¢ Long-term thinking over quick wins",
        "Taiwan's tech wisdom parallels Ruby's:",
        "‚Ä¢ Precision and reliability first (TSMC approach)",
        "‚Ä¢ Careful iteration and improvement",
        "‚Ä¢ Building sustainable ecosystems, not just features",
        "Question: How does your team balance innovation vs. stability?"
      ],
      "notes": "Connect Ruby's development philosophy to Taiwan's tech culture. Both prioritize long-term stability and careful decision-making.",
      "number": 26,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Interactive Break: Q&A Session",
      "content": [
        "Take a few minutes to ask any questions and clarify doubts you may have about frozen and chilled strings.",
        "ÁâπÂà•Ê≠°Ëøé‰∏≠ÊñáÂïèÈ°å! (Chinese questions especially welcome!)"
      ],
      "notes": "",
      "number": 27,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Best Practices for Testing with Frozen String Literals",
      "content": [
        "Enable deprecation warnings in tests (`Warning[:deprecated] = true` or `ruby -W:deprecated`) to catch literal-mutation issues:contentReference[oaicite:73]{index=73}.",
        "Use RuboCop‚Äôs FrozenStringLiteralComment cop to add or check the magic comment:contentReference[oaicite:74]{index=74}.",
        "Test for immutability: e.g. verify that constants aren‚Äôt modified by functions, or use `assert_equal constant, constant.dup`.",
        "Consider continuous integration: treat warnings as errors during upgrade to catch any new mutations."
      ],
      "notes": "In testing, we want to fail fast. For example, enable Ruby warnings so that any literal mutation shows up in CI (RSpec is working on this; Minitest already does it).",
      "number": 27,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Transition Slide: We‚Äôre Halfway There!",
      "content": [
        "Let‚Äôs take a quick glance back at what we‚Äôve covered so far.",
        "History of immutable strings, frozen_string_literal magic, chilled strings, and performance impacts."
      ],
      "notes": "Quick summary: we‚Äôve traced the story up to current chilled strings and performance. Next we‚Äôll continue with quality impacts and final examples.",
      "number": 28,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "The Impact on Code Quality and Readability",
      "content": [
        "Immutable strings can make code safer (fewer unintended side effects). They reduce bugs where a string constant changes underfoot.",
        "However, some developers have noted surprises: e.g. using a frozen string constant in a destructive method (like `transform_values!`) can quietly modify the shared data unexpectedly:contentReference[oaicite:75]{index=75}.",
        "In general, using frozen literals pushes you to think functionally (avoid side effects). It can improve clarity by removing manual `.freeze` calls, but requires awareness of immutability.",
        "With warnings and tests in place, most teams find frozen literals improve code quality, as mutation becomes explicit (`dup` or reassignment)."
      ],
      "notes": "Reflection: immutability is a trade-off. It avoids a class of bugs, but can surprise developers not expecting it. The community discussion noted that behavior like in this example was new:contentReference[oaicite:76]{index=76}.",
      "number": 29,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Real-World Impact: A Final Example",
      "content": [
        "Example (web request header): Without frozen literals, code often did `env[HTTP_PATH_INFO.dup]` on each request, allocating a new string each time. With a frozen literal, that extra allocation is eliminated:contentReference[oaicite:77]{index=77}.",
        "Jean Boussier explains that avoiding such duplicate allocations significantly reduces GC overhead (Ruby spent ~20-30% time in GC before):contentReference[oaicite:78]{index=78}.",
        "Thus freezing a literal key (or using a chilled string) removes a trivial inefficiency that adds up under high load.",
        "Tiny optimizations like this, multiplied across a large app, yield measurable performance improvements in production."
      ],
      "notes": "Concrete snippet: turning `'HTTP_PATH_INFO'` into a frozen literal means `env[...]` avoids a `.dup` every time. That one allocation per request disappears:contentReference[oaicite:79]{index=79}:contentReference[oaicite:80]{index=80}.",
      "number": 30,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Interactive Break 3: Exercise - Try It Out!",
      "content": [
        "Take a few minutes: add `# frozen_string_literal: true` to a Ruby file or script, and see if any warnings appear or behavior changes."
      ],
      "notes": "",
      "number": 31,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Conclusion (Part 1): Recap and Reflection",
      "content": [
        "We summarized the history: Ruby 2.3‚Äôs frozen-string pragma through Ruby 3.3‚Äôs chilled-strings change:contentReference[oaicite:81]{index=81}:contentReference[oaicite:82]{index=82}.",
        "Frozen literals reduce GC and speed up code in many cases:contentReference[oaicite:83]{index=83}:contentReference[oaicite:84]{index=84}.",
        "Chilled strings provide a gentle migration (warn vs error) to default immutability.",
        "Key takeaway: use frozen literals now and explicitly handle mutability to prepare for future Ruby defaults."
      ],
      "notes": "Recap: we covered the key points and rationale behind frozen strings and chilled strings, and why it matters for performance and safety.",
      "number": 32,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Conclusion (Part 2): The Future of Ruby Strings",
      "content": [
        "The likely future: Ruby 4.0 will default to frozen literals, as envisioned years ago:contentReference[oaicite:85]{index=85}.",
        "By then, code will have adapted (we‚Äôll use `dup` or constructors for mutable needs) and will have benefitted from the optimization.",
        "Beyond freezing, Ruby may introduce further innovations (e.g. string dedup internals, CoW, new literal syntax).",
        "Until then, frozen literals remain a great tool for performance today; thank you for chilling with me!"
      ],
      "notes": "Final thoughts: strings in Ruby are becoming more efficient. The switch to default immutability is coming, and that brings opportunities for speedups and new features.",
      "number": 33,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Final Q&A Session (Open Mic)",
      "content": [
        "Any remaining questions? Let‚Äôs discuss and clarify anything from this talk."
      ],
      "notes": "",
      "number": 34,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Your Action Plan: Embracing the Ruby Way (Taiwan Style)",
      "content": [
        "Today: Add # frozen_string_literal: true to new files",
        "Tomorrow: Use RuboCop to gradually update existing code", 
        "For mutable needs: Use .dup or +'' (performance is now equal)",
        "Test with warnings: Warning[:deprecated] = true",
        "The Ruby philosophy: Slow and steady wins the race",
        "# Taiwan tech wisdom applied to Ruby\n# Be patient like TSMC's manufacturing cycles\n# Test thoroughly like semiconductor QA\n# Plan for the long term like infrastructure development",
        "Remember: Chilled strings are Ruby's way of saying 'Â∞èÂøÉÔºÅ' (be careful!)"
      ],
      "notes": "Connect the technical advice to Taiwan's methodical approach to technology development. End on a cultural note that resonates with the local audience.",
      "number": 35,
      "image_path": null,
      "slide_type": "content"
    },
    {
      "title": "Ë¨ùË¨ù Taiwan! Thank You! üáπüáº‚ùÑÔ∏è",
      "content": [
        "Thank you RubyConf Taiwan for the warm welcome!",
        "Key takeaways:",
        "‚Ä¢ Ruby prioritizes stability over speed (a lesson for all of us)",
        "‚Ä¢ Chilled strings = Ruby's careful approach to change", 
        "‚Ä¢ Taiwan's tech culture aligns with Ruby's philosophy",
        "Sources and further reading:",
        "‚Ä¢ Ruby Issue #20205: https://bugs.ruby-lang.org/issues/20205",
        "‚Ä¢ Jean Boussier's chilled strings implementation",
        "‚Ä¢ RuboCop Style/FrozenStringLiteralComment",
        "Stay connected: Let's keep the Ruby Taiwan community strong! üíé"
      ],
      "notes": "End with gratitude to the local community and provide proper sources for follow-up.",
      "number": 36,
      "image_path": null,
      "slide_type": "content"
    }
  ],
  "estimated_duration": 95,
  "completion_status": "35/36 slides completed"
}